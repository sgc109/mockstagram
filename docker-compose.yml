version: '3.8'
services:
  web-frontend:
    build:
      context: ./web
      dockerfile: ./frontend/Dockerfile
    container_name: mockstagram-web-frontend
    ports:
      - "80:8081"
    depends_on:
      - web-bff
    networks:
      - mockstagram-network
  web-bff:
    build:
      context: ./web
      dockerfile: ./bff/Dockerfile
    container_name: mockstagram-web-bff
    ports:
      - "8082:8082"
    networks:
      - mockstagram-network
  content-api:
    image: mockstagram-content-api
    container_name: mockstagram-content-api
    ports:
      - "50051:50051"
    depends_on:
      - mongodb
    environment:
      MONGODB_DATASOURCE_URL: mongodb://content_user:content_pw@mongodb:27017/content
    networks:
      - mockstagram-network
  user-api:
    image: mockstagram-user-api
    container_name: mockstagram-user-api
    ports:
      - "50054:50054"
    depends_on:
      - mongodb
      - neo4j
    environment:
      MONGODB_DATASOURCE_URL: mongodb://user_user:user_pw@mongodb:27017/user
    networks:
      - mockstagram-network
  redis:
    image: redis:6.0
    container_name: mockstagram-redis
    restart: always
    ports:
      - "6379:6379"
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf", "--appendonly", "yes" ]  # AOF 활성화로 데이터 영속성 보장
    volumes:
      - ./init/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./init/redis/users.acl:/etc/redis/users.acl  # ACL 파일 추가
      - redis_data:/data
    networks:
      - mockstagram-network
  mysql:
    image: mysql:8.0
    container_name: mockstagram-mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./init/mysql:/docker-entrypoint-initdb.d
      - mysql-data:/var/lib/mysql
    networks:
      - mockstagram-network
  mongodb:
    image: mongo:4.4
    container_name: mockstagram-mongodb
    restart: always
    ports:
      - "27017:27017"
    command: ["mongod", "--replSet", "rs0", "--keyFile", "/etc/mongo-keyfile", "--auth"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - ./init/mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./init/mongodb/mongo-keyfile:/etc/mongo-keyfile:ro
    networks:
      - mockstagram-network
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.1
    container_name: mockstagram-elasticsearch
    ports:
      - "9200:9200" # Elasticsearch API
      - "9300:9300" # 클러스터 통신
    environment:
      - discovery.type=single-node # single node cluster setting
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true # For performance improvement
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g" # JVM 힙 메모리 설정
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s http://localhost:9200/_cluster/health | grep green || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mockstagram-network
  kibana:
    image: docker.elastic.co/kibana/kibana:8.16.1 # same version with Elasticsearch
    container_name: mockstagram-kibana
    ports:
      - "5601:5601" # Kibana Web UI
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 # connect to Elasticsearch
    depends_on:
      - elasticsearch
    networks:
      - mockstagram-network
  neo4j:
    image: neo4j:5.25.1
    container_name: mockstagram-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/root # username / password
      NEO4J_dbms_security_auth__minimum__password__length: 4
      NEO4J_dbms_memory_pagecache_size: 512M # cache size (e.g. 512MB)
      NEO4J_dbms_memory_heap_initial__size: 1G # initial heap memory
      NEO4J_dbms_memory_heap_max__size: 1G # max heap memory
    volumes:
      - neo4j_data:/data # data saving volume
      - neo4j_logs:/logs # log saving volume
      - neo4j_import:/var/lib/neo4j/import # CSV 데이터 등 가져오기 파일 저장
      - neo4j_plugins:/plugins # Neo4j 플러그인 설치 위치
    networks:
      - mockstagram-network
  kafka: # ref: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md
    image: apache/kafka:3.9.0
    hostname: kafka
    container_name: mockstagram-kafka
    restart: unless-stopped
    ports:
      - "19091:19091"
    environment:
      KAFKA_HEAP_OPTS: "-Xmx2G -Xms2G"  # JVM 힙 메모리 설정
    volumes:
      - ./init/kafka/file-input:/mnt/shared/config
      - ./init/kafka/secrets:/etc/kafka/secrets
      - /var/lib/kafka/data
    networks:
      - mockstagram-network
  kafka-connect:
    image: debezium/connect:2.7.0.Final
    container_name: mockstagram-kafka-connect
    hostname: kafka-connect
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=debezium
      - CONFIG_STORAGE_TOPIC=DEBEZIUM_CONNECT_CONFIGS
      - OFFSET_STORAGE_TOPIC=DEBEZIUM_CONNECT_OFFSETS
      - STATUS_STORAGE_TOPIC=DEBEZIUM_CONNECT_STATUSES
    depends_on:
      - mysql
      - mongodb
      - kafka
    volumes:
      - ./init/kafka-connect/mongo-source-connector.json:/kafka/connect/mongo-source-connector.json
    networks:
      - mockstagram-network
  akhq:
    image: tchiotludo/akhq:0.25.1
    container_name: mockstagram-akhq
    ports:
      - "8080:8080"
    environment:
      - AKHQ_OPTS=-Dakhq.storage.kafka.bootstrap-servers=kafka:9092
    depends_on:
      - kafka
      - kafka-connect
    volumes:
      - ./init/akhq/application.yml:/app/application.yml
    networks:
      - mockstagram-network
volumes:
  mysql-data:
  redis_data:
  es_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
networks:
  mockstagram-network:
    driver: bridge
