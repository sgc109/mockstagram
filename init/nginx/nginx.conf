events {}

http {
    resolver 127.0.0.11 valid=30s;

    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;

    server {
        listen 80;
        server_name image.mockstagramcdn.com;

        # URL 경로에서 버킷 이름과 파일 경로 추출
        location ~ ^/([^/]+)/(.+)$ {
            # $1은 버킷 이름, $2는 파일 경로
            proxy_pass http://minio:9002/$1/$2;  # MinIO 버킷과 파일 경로로 전달
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 캐싱 설정 (선택 사항)
            proxy_cache my_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_min_uses 1;
        }

        # 그 외의 파일들은 404로 처리
        location / {
            return 404;
        }
    }

    server {
        listen 80;
        server_name mockstagram.com;

        location /api/ {
            proxy_pass http://web-bff:8082;  # web-bff 컨테이너로 요청 전달
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Connection을 유지하도록 설정
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # 캐싱 설정 (선택 사항)
            proxy_cache my_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_min_uses 1;
        }

        location / {
            proxy_pass http://web-frontend:8081;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Connection을 유지하도록 설정
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # 캐싱 설정 (선택 사항)
            proxy_cache my_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_min_uses 1;
        }
    }

    server {
        listen 80;
        server_name _;  # 모든 다른 호스트에 대해 매칭

        location / {
            return 404;  # 404 오류 반환
        }
    }
}
