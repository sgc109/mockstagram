version: '3.8'
services:
  web-frontend:
    build:
      context: ./web
      dockerfile: ./frontend/Dockerfile
    container_name: mockstagram-web-frontend
    restart: on-failure
    ports:
      - "8081:8081"
    depends_on:
      - web-bff
  web-bff:
    build:
      context: ./web
      dockerfile: ./bff/Dockerfile
    container_name: mockstagram-web-bff
    restart: on-failure
    ports:
      - "8082:8082"
    depends_on:
      - media-server
      - content-api
      - comment-api
      - reaction-api
      - user-api
    env_file:
      - ./web/bff/.env.docker
  media-server:
    build:
      context: ./media-server
      dockerfile: Dockerfile
    container_name: mockstagram-media-server
    restart: on-failure
    ports:
      - "8084:8084"
    env_file:
      - ./media-server/.env.docker
    depends_on:
      - minio
      - dynamodb
    volumes:
      - .:/app
  content-api:
    image: mockstagram-content-api
    container_name: mockstagram-content-api
    restart: on-failure
    ports:
      - "50051:50051"
    depends_on:
      - mongodb
    environment:
      MONGODB_DATASOURCE_URL: mongodb://content_user:content_pw@mongodb:27017/content?replicaSet=rs0&readPreference=primary
  comment-api:
    image: mockstagram-comment-api
    container_name: mockstagram-comment-api
    restart: on-failure
    ports:
      - "50052:50052"
    depends_on:
      - mysql
    environment:
      JDBC_DATASOURCE_URL: jdbc:mysql://mysql:3306/comment?user=comment_user&password=comment_pw
  reaction-api:
    image: mockstagram-reaction-api
    container_name: mockstagram-reaction-api
    restart: on-failure
    ports:
      - "50053:50053"
    depends_on:
      - mysql
    environment:
      JDBC_DATASOURCE_URL: jdbc:mysql://mysql:3306/reaction?user=reaction_user&password=reaction_pw
  user-api:
    image: mockstagram-user-api
    container_name: mockstagram-user-api
    restart: on-failure
    ports:
      - "50054:50054"
    depends_on:
      - mysql
    environment:
      JDBC_DATASOURCE_URL: jdbc:mysql://mysql:3306/user?user=user_user&password=user_pw
  notification-consumer:
    image: mockstagram-notification-consumer
    container_name: mockstagram-notification-consumer
    restart: on-failure
    ports:
      - "51056:51056"
    depends_on:
      - mysql
      - kafka
      - schema-registry
    environment:
      JDBC_DATASOURCE_URL: jdbc:mysql://mysql:3306/notification?user=notification_user&password=notification_pw
      CONSUMER_GROUP_ID: notification-consumer
      SCHEMA_REGISTRY_URL: http://schema-registry:8086
  redis:
    image: redis:6.0
    container_name: mockstagram-redis
    restart: on-failure
    ports:
      - "6379:6379"
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf", "--appendonly", "yes" ]  # AOF 활성화로 데이터 영속성 보장
    volumes:
      - ./init/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./init/redis/users.acl:/etc/redis/users.acl  # ACL 파일 추가
      - redis_data:/data
  mysql:
    image: mysql:8.0
    container_name: mockstagram-mysql
    restart: on-failure
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./init/mysql:/docker-entrypoint-initdb.d
      - mysql-data:/var/lib/mysql
  mongodb:
    image: mongo:4.4
    container_name: mockstagram-mongodb
    restart: on-failure
    ports:
      - "27017:27017"
    command: ["mongod", "--replSet", "rs0", "--keyFile", "/etc/mongo-keyfile", "--auth"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - ./init/mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./init/mongodb/mongo-keyfile:/etc/mongo-keyfile:ro
      - mongodb-data:/data/db
  dynamodb:
    image: amazon/dynamodb-local
    container_name: mockstagram-dynamodb
    restart: on-failure
    ports:
      - "8000:8000"
    volumes:
      - dynamodb_data:/data
  #  neo4j:
  #    image: neo4j:5.25.1
  #    container_name: mockstagram-neo4j
  #    ports:
  #      - "7474:7474"
  #      - "7687:7687"
  #    environment:
  #      NEO4J_AUTH: neo4j/root # username / password
  #      NEO4J_dbms_security_auth__minimum__password__length: 4
  #      NEO4J_dbms_memory_pagecache_size: 512M # cache size (e.g. 512MB)
  #      NEO4J_dbms_memory_heap_initial__size: 1G # initial heap memory
  #      NEO4J_dbms_memory_heap_max__size: 1G # max heap memory
  #    volumes:
  #      - neo4j_data:/data # data saving volume
  #      - neo4j_logs:/logs # log saving volume
  #      - neo4j_import:/var/lib/neo4j/import # CSV 데이터 등 가져오기 파일 저장
  #      - neo4j_plugins:/plugins # Neo4j 플러그인 설치 위치
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.1
    container_name: mockstagram-elasticsearch
    restart: on-failure
    ports:
      - "9200:9200" # Elasticsearch API
      - "9300:9300" # Communication between nodes
    environment:
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - es_data:/usr/share/elasticsearch/data
      - ./init/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s http://localhost:9200/_cluster/health | grep green || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
  kibana:
    image: docker.elastic.co/kibana/kibana:8.16.1 # same version with Elasticsearch
    container_name: mockstagram-kibana
    restart: on-failure
    ports:
      - "5601:5601" # Kibana Web UI
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 # connect to Elasticsearch
    depends_on:
      - elasticsearch
  kafka: # ref: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md
    image: apache/kafka:3.9.0
    container_name: mockstagram-kafka
    restart: on-failure
    ports:
      - "19091:19091"
    environment:
      KAFKA_HEAP_OPTS: "-Xmx2G -Xms2G"  # JVM 힙 메모리 설정
    volumes:
      - ./init/kafka/file-input:/mnt/shared/config
      - ./init/kafka/secrets:/etc/kafka/secrets
      - kafka_data:/var/lib/kafka/data
  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.0
    container_name: mockstagram-schema-registry
    restart: on-failure
    ports:
      - "8086:8086"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8086
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    depends_on:
      - kafka
  kafka-connect:
    image: debezium/connect:2.7.3.Final
    container_name: mockstagram-kafka-connect
    restart: on-failure
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=debezium
      - CONFIG_STORAGE_TOPIC=DEBEZIUM_CONNECT_CONFIGS
      - OFFSET_STORAGE_TOPIC=DEBEZIUM_CONNECT_OFFSETS
      - STATUS_STORAGE_TOPIC=DEBEZIUM_CONNECT_STATUSES
    depends_on:
      - mysql
      - mongodb
      - kafka
      - schema-registry
    volumes:
#      - ./init/kafka-connect/likes-outbox-connector.json:/kafka/connect/likes-outbox-connector.json
#      - ./init/kafka-connect/mongo-source-connector.json:/kafka/connect/mongo-source-connector.json
      - ./init/kafka-connect/es-sink-connector.json:/kafka/connect/es-sink-connector.json
      - ./init/kafka-connect/elasticsearch-sink:/kafka/connect/kafka-connect-elasticsearch
  akhq:
    image: tchiotludo/akhq:0.25.1
    container_name: mockstagram-akhq
    restart: on-failure
    ports:
      - "8080:8080"
    environment:
      - AKHQ_OPTS=-Dakhq.storage.kafka.bootstrap-servers=kafka:9092
    depends_on:
      - kafka
      - kafka-connect
    volumes:
      - ./init/akhq/application.yml:/app/application.yml
  jobmanager:
    image: flink:latest
    container_name: mockstagram-flink-jobmanager
    ports:
      - "8087:8081"
    environment:
      FLINK_PROPERTIES: "jobmanager.rpc.address: jobmanager"
    volumes:
      - flink_data:/tmp/
    command: jobmanager
  taskmanager:
    image: flink:latest
    container_name: mockstagram-flink-taskmanager
    depends_on:
      - jobmanager
    environment:
      FLINK_PROPERTIES: "jobmanager.rpc.address: jobmanager"
    volumes:
      - flink_data:/tmp/
    command: taskmanager
  minio:
    image: minio/minio
    container_name: mockstagram-minio
    restart: on-failure
    environment:
      - MINIO_ROOT_USER=root
      - MINIO_ROOT_PASSWORD=rootroot
    ports:
      - "9002:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
  nginx:
    image: nginx:latest
    container_name: mockstagram-nginx
    restart: on-failure
    ports:
      - "80:80" # Nginx 웹 서버
    volumes:
      - ./init/nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Nginx 설정 파일
    depends_on:
      - minio
      - web-frontend
      - web-bff
volumes:
  mysql-data:
  mongodb-data:
  redis_data:
  es_data:
  minio_data:
  dynamodb_data:
  kafka_data:
  flink_data:
#  neo4j_data:
#  neo4j_logs:
#  neo4j_import:
#  neo4j_plugins:
